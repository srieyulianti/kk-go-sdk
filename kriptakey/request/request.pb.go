// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: request.proto

package request

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TokenizeType int32

const (
	TokenizeType_CIPHER        TokenizeType = 0
	TokenizeType_MASKING       TokenizeType = 1
	TokenizeType_ALPHA         TokenizeType = 2
	TokenizeType_NUMERIC       TokenizeType = 3
	TokenizeType_ALPHA_NUMERIC TokenizeType = 4
)

// Enum value maps for TokenizeType.
var (
	TokenizeType_name = map[int32]string{
		0: "CIPHER",
		1: "MASKING",
		2: "ALPHA",
		3: "NUMERIC",
		4: "ALPHA_NUMERIC",
	}
	TokenizeType_value = map[string]int32{
		"CIPHER":        0,
		"MASKING":       1,
		"ALPHA":         2,
		"NUMERIC":       3,
		"ALPHA_NUMERIC": 4,
	}
)

func (x TokenizeType) Enum() *TokenizeType {
	p := new(TokenizeType)
	*p = x
	return p
}

func (x TokenizeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TokenizeType) Descriptor() protoreflect.EnumDescriptor {
	return file_request_proto_enumTypes[0].Descriptor()
}

func (TokenizeType) Type() protoreflect.EnumType {
	return &file_request_proto_enumTypes[0]
}

func (x TokenizeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TokenizeType.Descriptor instead.
func (TokenizeType) EnumDescriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{0}
}

type APIRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *APIRequest) Reset() {
	*x = APIRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequest) ProtoMessage() {}

func (x *APIRequest) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequest.ProtoReflect.Descriptor instead.
func (*APIRequest) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{0}
}

type APIRequest_SingleVerifyMAC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string                  `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Mac  string                  `protobuf:"bytes,2,opt,name=mac,proto3" json:"mac,omitempty"`
	Iv   *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=iv,proto3" json:"iv,omitempty"`
}

func (x *APIRequest_SingleVerifyMAC) Reset() {
	*x = APIRequest_SingleVerifyMAC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequest_SingleVerifyMAC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequest_SingleVerifyMAC) ProtoMessage() {}

func (x *APIRequest_SingleVerifyMAC) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequest_SingleVerifyMAC.ProtoReflect.Descriptor instead.
func (*APIRequest_SingleVerifyMAC) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{0, 0}
}

func (x *APIRequest_SingleVerifyMAC) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *APIRequest_SingleVerifyMAC) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *APIRequest_SingleVerifyMAC) GetIv() *wrapperspb.StringValue {
	if x != nil {
		return x.Iv
	}
	return nil
}

type APIRequest_VerifyMAC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mac []*APIRequest_SingleVerifyMAC `protobuf:"bytes,1,rep,name=mac,proto3" json:"mac,omitempty"`
}

func (x *APIRequest_VerifyMAC) Reset() {
	*x = APIRequest_VerifyMAC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequest_VerifyMAC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequest_VerifyMAC) ProtoMessage() {}

func (x *APIRequest_VerifyMAC) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequest_VerifyMAC.ProtoReflect.Descriptor instead.
func (*APIRequest_VerifyMAC) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{0, 1}
}

func (x *APIRequest_VerifyMAC) GetMac() []*APIRequest_SingleVerifyMAC {
	if x != nil {
		return x.Mac
	}
	return nil
}

type APIRequest_SingleEncrypt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plaintext string                  `protobuf:"bytes,1,opt,name=plaintext,proto3" json:"plaintext,omitempty"`
	Aad       *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=aad,proto3" json:"aad,omitempty"`
}

func (x *APIRequest_SingleEncrypt) Reset() {
	*x = APIRequest_SingleEncrypt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequest_SingleEncrypt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequest_SingleEncrypt) ProtoMessage() {}

func (x *APIRequest_SingleEncrypt) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequest_SingleEncrypt.ProtoReflect.Descriptor instead.
func (*APIRequest_SingleEncrypt) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{0, 2}
}

func (x *APIRequest_SingleEncrypt) GetPlaintext() string {
	if x != nil {
		return x.Plaintext
	}
	return ""
}

func (x *APIRequest_SingleEncrypt) GetAad() *wrapperspb.StringValue {
	if x != nil {
		return x.Aad
	}
	return nil
}

type APIRequest_Encrypt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plaintext []*APIRequest_SingleEncrypt `protobuf:"bytes,1,rep,name=plaintext,proto3" json:"plaintext,omitempty"`
}

func (x *APIRequest_Encrypt) Reset() {
	*x = APIRequest_Encrypt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequest_Encrypt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequest_Encrypt) ProtoMessage() {}

func (x *APIRequest_Encrypt) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequest_Encrypt.ProtoReflect.Descriptor instead.
func (*APIRequest_Encrypt) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{0, 3}
}

func (x *APIRequest_Encrypt) GetPlaintext() []*APIRequest_SingleEncrypt {
	if x != nil {
		return x.Plaintext
	}
	return nil
}

type APIRequest_SingleDecrypt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyID             string                  `protobuf:"bytes,1,opt,name=keyID,proto3" json:"keyID,omitempty"`
	KeyVersion        *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=keyVersion,proto3" json:"keyVersion,omitempty"`
	Aad               *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=aad,proto3" json:"aad,omitempty"`
	Mac               *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=mac,proto3" json:"mac,omitempty"`
	Ciphertext        string                  `protobuf:"bytes,5,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`
	Iv                *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=iv,proto3" json:"iv,omitempty"`
	WrappedSessionKey *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=wrappedSessionKey,proto3" json:"wrappedSessionKey,omitempty"`
}

func (x *APIRequest_SingleDecrypt) Reset() {
	*x = APIRequest_SingleDecrypt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequest_SingleDecrypt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequest_SingleDecrypt) ProtoMessage() {}

func (x *APIRequest_SingleDecrypt) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequest_SingleDecrypt.ProtoReflect.Descriptor instead.
func (*APIRequest_SingleDecrypt) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{0, 4}
}

func (x *APIRequest_SingleDecrypt) GetKeyID() string {
	if x != nil {
		return x.KeyID
	}
	return ""
}

func (x *APIRequest_SingleDecrypt) GetKeyVersion() *wrapperspb.UInt32Value {
	if x != nil {
		return x.KeyVersion
	}
	return nil
}

func (x *APIRequest_SingleDecrypt) GetAad() *wrapperspb.StringValue {
	if x != nil {
		return x.Aad
	}
	return nil
}

func (x *APIRequest_SingleDecrypt) GetMac() *wrapperspb.StringValue {
	if x != nil {
		return x.Mac
	}
	return nil
}

func (x *APIRequest_SingleDecrypt) GetCiphertext() string {
	if x != nil {
		return x.Ciphertext
	}
	return ""
}

func (x *APIRequest_SingleDecrypt) GetIv() *wrapperspb.StringValue {
	if x != nil {
		return x.Iv
	}
	return nil
}

func (x *APIRequest_SingleDecrypt) GetWrappedSessionKey() *wrapperspb.StringValue {
	if x != nil {
		return x.WrappedSessionKey
	}
	return nil
}

type APIRequest_Decrypt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ciphertext []*APIRequest_SingleDecrypt `protobuf:"bytes,1,rep,name=ciphertext,proto3" json:"ciphertext,omitempty"`
}

func (x *APIRequest_Decrypt) Reset() {
	*x = APIRequest_Decrypt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequest_Decrypt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequest_Decrypt) ProtoMessage() {}

func (x *APIRequest_Decrypt) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequest_Decrypt.ProtoReflect.Descriptor instead.
func (*APIRequest_Decrypt) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{0, 5}
}

func (x *APIRequest_Decrypt) GetCiphertext() []*APIRequest_SingleDecrypt {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

type APIRequest_SingleExternalDecrypt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aad               *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=aad,proto3" json:"aad,omitempty"`
	Mac               *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=mac,proto3" json:"mac,omitempty"`
	Ciphertext        string                  `protobuf:"bytes,3,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`
	Iv                *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=iv,proto3" json:"iv,omitempty"`
	WrappedSessionKey *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=wrappedSessionKey,proto3" json:"wrappedSessionKey,omitempty"`
}

func (x *APIRequest_SingleExternalDecrypt) Reset() {
	*x = APIRequest_SingleExternalDecrypt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequest_SingleExternalDecrypt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequest_SingleExternalDecrypt) ProtoMessage() {}

func (x *APIRequest_SingleExternalDecrypt) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequest_SingleExternalDecrypt.ProtoReflect.Descriptor instead.
func (*APIRequest_SingleExternalDecrypt) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{0, 6}
}

func (x *APIRequest_SingleExternalDecrypt) GetAad() *wrapperspb.StringValue {
	if x != nil {
		return x.Aad
	}
	return nil
}

func (x *APIRequest_SingleExternalDecrypt) GetMac() *wrapperspb.StringValue {
	if x != nil {
		return x.Mac
	}
	return nil
}

func (x *APIRequest_SingleExternalDecrypt) GetCiphertext() string {
	if x != nil {
		return x.Ciphertext
	}
	return ""
}

func (x *APIRequest_SingleExternalDecrypt) GetIv() *wrapperspb.StringValue {
	if x != nil {
		return x.Iv
	}
	return nil
}

func (x *APIRequest_SingleExternalDecrypt) GetWrappedSessionKey() *wrapperspb.StringValue {
	if x != nil {
		return x.WrappedSessionKey
	}
	return nil
}

type APIRequest_ExternalDecrypt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ciphertext []*APIRequest_SingleExternalDecrypt `protobuf:"bytes,1,rep,name=ciphertext,proto3" json:"ciphertext,omitempty"`
}

func (x *APIRequest_ExternalDecrypt) Reset() {
	*x = APIRequest_ExternalDecrypt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequest_ExternalDecrypt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequest_ExternalDecrypt) ProtoMessage() {}

func (x *APIRequest_ExternalDecrypt) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequest_ExternalDecrypt.ProtoReflect.Descriptor instead.
func (*APIRequest_ExternalDecrypt) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{0, 7}
}

func (x *APIRequest_ExternalDecrypt) GetCiphertext() []*APIRequest_SingleExternalDecrypt {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

type APIRequest_SingleTokenize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text          string       `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	FormatChar    string       `protobuf:"bytes,2,opt,name=formatChar,proto3" json:"formatChar,omitempty"`
	TokenizedWith TokenizeType `protobuf:"varint,3,opt,name=tokenizedWith,proto3,enum=kk.core.structure.TokenizeType" json:"tokenizedWith,omitempty"`
}

func (x *APIRequest_SingleTokenize) Reset() {
	*x = APIRequest_SingleTokenize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequest_SingleTokenize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequest_SingleTokenize) ProtoMessage() {}

func (x *APIRequest_SingleTokenize) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequest_SingleTokenize.ProtoReflect.Descriptor instead.
func (*APIRequest_SingleTokenize) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{0, 8}
}

func (x *APIRequest_SingleTokenize) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *APIRequest_SingleTokenize) GetFormatChar() string {
	if x != nil {
		return x.FormatChar
	}
	return ""
}

func (x *APIRequest_SingleTokenize) GetTokenizedWith() TokenizeType {
	if x != nil {
		return x.TokenizedWith
	}
	return TokenizeType_CIPHER
}

type APIRequest_Tokenize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text []*APIRequest_SingleTokenize `protobuf:"bytes,1,rep,name=text,proto3" json:"text,omitempty"`
}

func (x *APIRequest_Tokenize) Reset() {
	*x = APIRequest_Tokenize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequest_Tokenize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequest_Tokenize) ProtoMessage() {}

func (x *APIRequest_Tokenize) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequest_Tokenize.ProtoReflect.Descriptor instead.
func (*APIRequest_Tokenize) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{0, 9}
}

func (x *APIRequest_Tokenize) GetText() []*APIRequest_SingleTokenize {
	if x != nil {
		return x.Text
	}
	return nil
}

type APIRequest_SingleDetokenize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Metadata string `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *APIRequest_SingleDetokenize) Reset() {
	*x = APIRequest_SingleDetokenize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequest_SingleDetokenize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequest_SingleDetokenize) ProtoMessage() {}

func (x *APIRequest_SingleDetokenize) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequest_SingleDetokenize.ProtoReflect.Descriptor instead.
func (*APIRequest_SingleDetokenize) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{0, 10}
}

func (x *APIRequest_SingleDetokenize) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *APIRequest_SingleDetokenize) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

type APIRequest_Detokenize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token []*APIRequest_SingleDetokenize `protobuf:"bytes,1,rep,name=token,proto3" json:"token,omitempty"`
}

func (x *APIRequest_Detokenize) Reset() {
	*x = APIRequest_Detokenize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequest_Detokenize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequest_Detokenize) ProtoMessage() {}

func (x *APIRequest_Detokenize) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequest_Detokenize.ProtoReflect.Descriptor instead.
func (*APIRequest_Detokenize) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{0, 11}
}

func (x *APIRequest_Detokenize) GetToken() []*APIRequest_SingleDetokenize {
	if x != nil {
		return x.Token
	}
	return nil
}

type APIRequest_SingleReencrypt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyVersion        *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=keyVersion,proto3" json:"keyVersion,omitempty"`
	Aad               *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=aad,proto3" json:"aad,omitempty"`
	Mac               *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=mac,proto3" json:"mac,omitempty"`
	Ciphertext        string                  `protobuf:"bytes,5,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`
	Iv                *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=iv,proto3" json:"iv,omitempty"`
	WrappedSessionKey *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=wrappedSessionKey,proto3" json:"wrappedSessionKey,omitempty"`
}

func (x *APIRequest_SingleReencrypt) Reset() {
	*x = APIRequest_SingleReencrypt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequest_SingleReencrypt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequest_SingleReencrypt) ProtoMessage() {}

func (x *APIRequest_SingleReencrypt) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequest_SingleReencrypt.ProtoReflect.Descriptor instead.
func (*APIRequest_SingleReencrypt) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{0, 12}
}

func (x *APIRequest_SingleReencrypt) GetKeyVersion() *wrapperspb.UInt32Value {
	if x != nil {
		return x.KeyVersion
	}
	return nil
}

func (x *APIRequest_SingleReencrypt) GetAad() *wrapperspb.StringValue {
	if x != nil {
		return x.Aad
	}
	return nil
}

func (x *APIRequest_SingleReencrypt) GetMac() *wrapperspb.StringValue {
	if x != nil {
		return x.Mac
	}
	return nil
}

func (x *APIRequest_SingleReencrypt) GetCiphertext() string {
	if x != nil {
		return x.Ciphertext
	}
	return ""
}

func (x *APIRequest_SingleReencrypt) GetIv() *wrapperspb.StringValue {
	if x != nil {
		return x.Iv
	}
	return nil
}

func (x *APIRequest_SingleReencrypt) GetWrappedSessionKey() *wrapperspb.StringValue {
	if x != nil {
		return x.WrappedSessionKey
	}
	return nil
}

type APIRequest_Reencrypt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ciphertext []*APIRequest_SingleReencrypt `protobuf:"bytes,1,rep,name=ciphertext,proto3" json:"ciphertext,omitempty"`
}

func (x *APIRequest_Reencrypt) Reset() {
	*x = APIRequest_Reencrypt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequest_Reencrypt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequest_Reencrypt) ProtoMessage() {}

func (x *APIRequest_Reencrypt) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequest_Reencrypt.ProtoReflect.Descriptor instead.
func (*APIRequest_Reencrypt) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{0, 13}
}

func (x *APIRequest_Reencrypt) GetCiphertext() []*APIRequest_SingleReencrypt {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

type APIRequest_E2EEReencryptFromSessionKeyToPermanentKeySource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WrappingKeyId     string                    `protobuf:"bytes,1,opt,name=wrappingKeyId,proto3" json:"wrappingKeyId,omitempty"`
	WrappedPrivateKey *wrapperspb.StringValue   `protobuf:"bytes,2,opt,name=wrappedPrivateKey,proto3" json:"wrappedPrivateKey,omitempty"`
	SessionKeyAlgo    string                    `protobuf:"bytes,3,opt,name=sessionKeyAlgo,proto3" json:"sessionKeyAlgo,omitempty"`
	MacAlgo           string                    `protobuf:"bytes,4,opt,name=macAlgo,proto3" json:"macAlgo,omitempty"`
	OaepLabel         string                    `protobuf:"bytes,5,opt,name=oaepLabel,proto3" json:"oaepLabel,omitempty"`
	Metadata          *wrapperspb.StringValue   `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Ciphertext        []*wrapperspb.StringValue `protobuf:"bytes,7,rep,name=ciphertext,proto3" json:"ciphertext,omitempty"`
}

func (x *APIRequest_E2EEReencryptFromSessionKeyToPermanentKeySource) Reset() {
	*x = APIRequest_E2EEReencryptFromSessionKeyToPermanentKeySource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequest_E2EEReencryptFromSessionKeyToPermanentKeySource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequest_E2EEReencryptFromSessionKeyToPermanentKeySource) ProtoMessage() {}

func (x *APIRequest_E2EEReencryptFromSessionKeyToPermanentKeySource) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequest_E2EEReencryptFromSessionKeyToPermanentKeySource.ProtoReflect.Descriptor instead.
func (*APIRequest_E2EEReencryptFromSessionKeyToPermanentKeySource) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{0, 14}
}

func (x *APIRequest_E2EEReencryptFromSessionKeyToPermanentKeySource) GetWrappingKeyId() string {
	if x != nil {
		return x.WrappingKeyId
	}
	return ""
}

func (x *APIRequest_E2EEReencryptFromSessionKeyToPermanentKeySource) GetWrappedPrivateKey() *wrapperspb.StringValue {
	if x != nil {
		return x.WrappedPrivateKey
	}
	return nil
}

func (x *APIRequest_E2EEReencryptFromSessionKeyToPermanentKeySource) GetSessionKeyAlgo() string {
	if x != nil {
		return x.SessionKeyAlgo
	}
	return ""
}

func (x *APIRequest_E2EEReencryptFromSessionKeyToPermanentKeySource) GetMacAlgo() string {
	if x != nil {
		return x.MacAlgo
	}
	return ""
}

func (x *APIRequest_E2EEReencryptFromSessionKeyToPermanentKeySource) GetOaepLabel() string {
	if x != nil {
		return x.OaepLabel
	}
	return ""
}

func (x *APIRequest_E2EEReencryptFromSessionKeyToPermanentKeySource) GetMetadata() *wrapperspb.StringValue {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *APIRequest_E2EEReencryptFromSessionKeyToPermanentKeySource) GetCiphertext() []*wrapperspb.StringValue {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

type APIRequest_E2EEReencryptFromSessionKeyToPermanentKeyDestination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PermanentKeyId string `protobuf:"bytes,1,opt,name=permanentKeyId,proto3" json:"permanentKeyId,omitempty"`
	Algo           string `protobuf:"bytes,2,opt,name=algo,proto3" json:"algo,omitempty"`
}

func (x *APIRequest_E2EEReencryptFromSessionKeyToPermanentKeyDestination) Reset() {
	*x = APIRequest_E2EEReencryptFromSessionKeyToPermanentKeyDestination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequest_E2EEReencryptFromSessionKeyToPermanentKeyDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequest_E2EEReencryptFromSessionKeyToPermanentKeyDestination) ProtoMessage() {}

func (x *APIRequest_E2EEReencryptFromSessionKeyToPermanentKeyDestination) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequest_E2EEReencryptFromSessionKeyToPermanentKeyDestination.ProtoReflect.Descriptor instead.
func (*APIRequest_E2EEReencryptFromSessionKeyToPermanentKeyDestination) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{0, 15}
}

func (x *APIRequest_E2EEReencryptFromSessionKeyToPermanentKeyDestination) GetPermanentKeyId() string {
	if x != nil {
		return x.PermanentKeyId
	}
	return ""
}

func (x *APIRequest_E2EEReencryptFromSessionKeyToPermanentKeyDestination) GetAlgo() string {
	if x != nil {
		return x.Algo
	}
	return ""
}

type APIRequest_E2EESingleCiphertext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Mac  *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=mac,proto3" json:"mac,omitempty"`
	Iv   *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=iv,proto3" json:"iv,omitempty"`
}

func (x *APIRequest_E2EESingleCiphertext) Reset() {
	*x = APIRequest_E2EESingleCiphertext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequest_E2EESingleCiphertext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequest_E2EESingleCiphertext) ProtoMessage() {}

func (x *APIRequest_E2EESingleCiphertext) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequest_E2EESingleCiphertext.ProtoReflect.Descriptor instead.
func (*APIRequest_E2EESingleCiphertext) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{0, 16}
}

func (x *APIRequest_E2EESingleCiphertext) GetText() *wrapperspb.StringValue {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *APIRequest_E2EESingleCiphertext) GetMac() *wrapperspb.StringValue {
	if x != nil {
		return x.Mac
	}
	return nil
}

func (x *APIRequest_E2EESingleCiphertext) GetIv() *wrapperspb.StringValue {
	if x != nil {
		return x.Iv
	}
	return nil
}

type APIRequest_E2EECompareWith struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PermanentKeyId string                             `protobuf:"bytes,1,opt,name=permanentKeyId,proto3" json:"permanentKeyId,omitempty"`
	KeyVersion     *wrapperspb.UInt32Value            `protobuf:"bytes,2,opt,name=keyVersion,proto3" json:"keyVersion,omitempty"`
	Algo           string                             `protobuf:"bytes,3,opt,name=algo,proto3" json:"algo,omitempty"`
	Ciphertext     []*APIRequest_E2EESingleCiphertext `protobuf:"bytes,4,rep,name=ciphertext,proto3" json:"ciphertext,omitempty"`
}

func (x *APIRequest_E2EECompareWith) Reset() {
	*x = APIRequest_E2EECompareWith{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequest_E2EECompareWith) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequest_E2EECompareWith) ProtoMessage() {}

func (x *APIRequest_E2EECompareWith) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequest_E2EECompareWith.ProtoReflect.Descriptor instead.
func (*APIRequest_E2EECompareWith) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{0, 17}
}

func (x *APIRequest_E2EECompareWith) GetPermanentKeyId() string {
	if x != nil {
		return x.PermanentKeyId
	}
	return ""
}

func (x *APIRequest_E2EECompareWith) GetKeyVersion() *wrapperspb.UInt32Value {
	if x != nil {
		return x.KeyVersion
	}
	return nil
}

func (x *APIRequest_E2EECompareWith) GetAlgo() string {
	if x != nil {
		return x.Algo
	}
	return ""
}

func (x *APIRequest_E2EECompareWith) GetCiphertext() []*APIRequest_E2EESingleCiphertext {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

type APIRequest_E2EEReencryptFromPermanentKeyToClientKeySource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WrappingKeyId              string                             `protobuf:"bytes,1,opt,name=wrappingKeyId,proto3" json:"wrappingKeyId,omitempty"`
	EncryptedClientKey         *wrapperspb.StringValue            `protobuf:"bytes,2,opt,name=encryptedClientKey,proto3" json:"encryptedClientKey,omitempty"`
	EncryptedClientKeyMetadata *wrapperspb.StringValue            `protobuf:"bytes,3,opt,name=encryptedClientKeyMetadata,proto3" json:"encryptedClientKeyMetadata,omitempty"`
	Algo                       string                             `protobuf:"bytes,4,opt,name=algo,proto3" json:"algo,omitempty"`
	PermanentKeyId             string                             `protobuf:"bytes,5,opt,name=permanentKeyId,proto3" json:"permanentKeyId,omitempty"`
	KeyVersion                 *wrapperspb.UInt32Value            `protobuf:"bytes,6,opt,name=keyVersion,proto3" json:"keyVersion,omitempty"`
	Ciphertext                 []*APIRequest_E2EESingleCiphertext `protobuf:"bytes,7,rep,name=ciphertext,proto3" json:"ciphertext,omitempty"`
}

func (x *APIRequest_E2EEReencryptFromPermanentKeyToClientKeySource) Reset() {
	*x = APIRequest_E2EEReencryptFromPermanentKeyToClientKeySource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequest_E2EEReencryptFromPermanentKeyToClientKeySource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequest_E2EEReencryptFromPermanentKeyToClientKeySource) ProtoMessage() {}

func (x *APIRequest_E2EEReencryptFromPermanentKeyToClientKeySource) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequest_E2EEReencryptFromPermanentKeyToClientKeySource.ProtoReflect.Descriptor instead.
func (*APIRequest_E2EEReencryptFromPermanentKeyToClientKeySource) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{0, 18}
}

func (x *APIRequest_E2EEReencryptFromPermanentKeyToClientKeySource) GetWrappingKeyId() string {
	if x != nil {
		return x.WrappingKeyId
	}
	return ""
}

func (x *APIRequest_E2EEReencryptFromPermanentKeyToClientKeySource) GetEncryptedClientKey() *wrapperspb.StringValue {
	if x != nil {
		return x.EncryptedClientKey
	}
	return nil
}

func (x *APIRequest_E2EEReencryptFromPermanentKeyToClientKeySource) GetEncryptedClientKeyMetadata() *wrapperspb.StringValue {
	if x != nil {
		return x.EncryptedClientKeyMetadata
	}
	return nil
}

func (x *APIRequest_E2EEReencryptFromPermanentKeyToClientKeySource) GetAlgo() string {
	if x != nil {
		return x.Algo
	}
	return ""
}

func (x *APIRequest_E2EEReencryptFromPermanentKeyToClientKeySource) GetPermanentKeyId() string {
	if x != nil {
		return x.PermanentKeyId
	}
	return ""
}

func (x *APIRequest_E2EEReencryptFromPermanentKeyToClientKeySource) GetKeyVersion() *wrapperspb.UInt32Value {
	if x != nil {
		return x.KeyVersion
	}
	return nil
}

func (x *APIRequest_E2EEReencryptFromPermanentKeyToClientKeySource) GetCiphertext() []*APIRequest_E2EESingleCiphertext {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

type APIRequest_E2EEReencryptFromPermanentKeyToSessionKeyDestination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientKeyAlgo string `protobuf:"bytes,1,opt,name=clientKeyAlgo,proto3" json:"clientKeyAlgo,omitempty"`
}

func (x *APIRequest_E2EEReencryptFromPermanentKeyToSessionKeyDestination) Reset() {
	*x = APIRequest_E2EEReencryptFromPermanentKeyToSessionKeyDestination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequest_E2EEReencryptFromPermanentKeyToSessionKeyDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequest_E2EEReencryptFromPermanentKeyToSessionKeyDestination) ProtoMessage() {}

func (x *APIRequest_E2EEReencryptFromPermanentKeyToSessionKeyDestination) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequest_E2EEReencryptFromPermanentKeyToSessionKeyDestination.ProtoReflect.Descriptor instead.
func (*APIRequest_E2EEReencryptFromPermanentKeyToSessionKeyDestination) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{0, 19}
}

func (x *APIRequest_E2EEReencryptFromPermanentKeyToSessionKeyDestination) GetClientKeyAlgo() string {
	if x != nil {
		return x.ClientKeyAlgo
	}
	return ""
}

type APIRequest_E2EEEncryptToClientKeySource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WrappingKeyId              string                  `protobuf:"bytes,1,opt,name=wrappingKeyId,proto3" json:"wrappingKeyId,omitempty"`
	EncryptedClientKey         *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=encryptedClientKey,proto3" json:"encryptedClientKey,omitempty"`
	EncryptedClientKeyMetadata *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=encryptedClientKeyMetadata,proto3" json:"encryptedClientKeyMetadata,omitempty"`
	Algo                       string                  `protobuf:"bytes,4,opt,name=algo,proto3" json:"algo,omitempty"`
	Plaintext                  []string                `protobuf:"bytes,5,rep,name=plaintext,proto3" json:"plaintext,omitempty"`
}

func (x *APIRequest_E2EEEncryptToClientKeySource) Reset() {
	*x = APIRequest_E2EEEncryptToClientKeySource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequest_E2EEEncryptToClientKeySource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequest_E2EEEncryptToClientKeySource) ProtoMessage() {}

func (x *APIRequest_E2EEEncryptToClientKeySource) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequest_E2EEEncryptToClientKeySource.ProtoReflect.Descriptor instead.
func (*APIRequest_E2EEEncryptToClientKeySource) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{0, 20}
}

func (x *APIRequest_E2EEEncryptToClientKeySource) GetWrappingKeyId() string {
	if x != nil {
		return x.WrappingKeyId
	}
	return ""
}

func (x *APIRequest_E2EEEncryptToClientKeySource) GetEncryptedClientKey() *wrapperspb.StringValue {
	if x != nil {
		return x.EncryptedClientKey
	}
	return nil
}

func (x *APIRequest_E2EEEncryptToClientKeySource) GetEncryptedClientKeyMetadata() *wrapperspb.StringValue {
	if x != nil {
		return x.EncryptedClientKeyMetadata
	}
	return nil
}

func (x *APIRequest_E2EEEncryptToClientKeySource) GetAlgo() string {
	if x != nil {
		return x.Algo
	}
	return ""
}

func (x *APIRequest_E2EEEncryptToClientKeySource) GetPlaintext() []string {
	if x != nil {
		return x.Plaintext
	}
	return nil
}

type APIRequest_E2EEEncryptToClientKeyDestination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientKeyAlgo string `protobuf:"bytes,1,opt,name=clientKeyAlgo,proto3" json:"clientKeyAlgo,omitempty"`
}

func (x *APIRequest_E2EEEncryptToClientKeyDestination) Reset() {
	*x = APIRequest_E2EEEncryptToClientKeyDestination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_request_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequest_E2EEEncryptToClientKeyDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequest_E2EEEncryptToClientKeyDestination) ProtoMessage() {}

func (x *APIRequest_E2EEEncryptToClientKeyDestination) ProtoReflect() protoreflect.Message {
	mi := &file_request_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequest_E2EEEncryptToClientKeyDestination.ProtoReflect.Descriptor instead.
func (*APIRequest_E2EEEncryptToClientKeyDestination) Descriptor() ([]byte, []int) {
	return file_request_proto_rawDescGZIP(), []int{0, 21}
}

func (x *APIRequest_E2EEEncryptToClientKeyDestination) GetClientKeyAlgo() string {
	if x != nil {
		return x.ClientKeyAlgo
	}
	return ""
}

var File_request_proto protoreflect.FileDescriptor

var file_request_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x11, 0x6b, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xf3, 0x1d, 0x0a, 0x0a, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x65, 0x0a, 0x0f, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x4d, 0x41, 0x43, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x76,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x76, 0x1a, 0x4c, 0x0a, 0x09, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x4d, 0x41, 0x43, 0x12, 0x3f, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6b, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4d, 0x41,
	0x43, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x1a, 0x5d, 0x0a, 0x0d, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a, 0x03, 0x61, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x03, 0x61, 0x61, 0x64, 0x1a, 0x54, 0x0a, 0x07, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x12, 0x49, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6b, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x52, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0xdd, 0x02, 0x0a, 0x0d,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6b, 0x65, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65,
	0x79, 0x49, 0x44, 0x12, 0x3c, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2e, 0x0a, 0x03, 0x61, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x61, 0x61,
	0x64, 0x12, 0x2e, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6d, 0x61,
	0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x76, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x76, 0x12,
	0x4a, 0x0a, 0x11, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x1a, 0x56, 0x0a, 0x07, 0x44,
	0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x4b, 0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6b, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x41,
	0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74,
	0x65, 0x78, 0x74, 0x1a, 0x91, 0x02, 0x0a, 0x15, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x2e, 0x0a,
	0x03, 0x61, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x61, 0x61, 0x64, 0x12, 0x2e, 0x0a,
	0x03, 0x6d, 0x61, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2c, 0x0a,
	0x02, 0x69, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x76, 0x12, 0x4a, 0x0a, 0x11, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x1a, 0x66, 0x0a, 0x0f, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x53, 0x0a, 0x0a, 0x63, 0x69,
	0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x6b, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x52, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x1a,
	0x8b, 0x01, 0x0a, 0x0e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x69,
	0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x43, 0x68, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x43, 0x68, 0x61, 0x72, 0x12, 0x45, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69,
	0x7a, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x6b, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x1a, 0x4c, 0x0a,
	0x08, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6b, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x41, 0x50, 0x49, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x44, 0x0a, 0x10, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x1a, 0x52, 0x0a, 0x0a, 0x44, 0x65, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x12,
	0x44, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x6b, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0xd6, 0x02, 0x0a, 0x0f, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x52, 0x65, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x6b, 0x65, 0x79,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6b, 0x65, 0x79,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x03, 0x61, 0x61, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x03, 0x61, 0x61, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65,
	0x72, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x69, 0x70,
	0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x76, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x02, 0x69, 0x76, 0x12, 0x4a, 0x0a, 0x11, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x44, 0x1a, 0x5a,
	0x0a, 0x09, 0x52, 0x65, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x4d, 0x0a, 0x0a, 0x63,
	0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x6b, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x0a,
	0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x1a, 0xfb, 0x02, 0x0a, 0x2f, 0x45,
	0x32, 0x45, 0x45, 0x52, 0x65, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x46, 0x72, 0x6f, 0x6d,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x54, 0x6f, 0x50, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x77, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4b,
	0x65, 0x79, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x11, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x41, 0x6c,
	0x67, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x41, 0x6c, 0x67, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x41,
	0x6c, 0x67, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x41, 0x6c,
	0x67, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x61, 0x65, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x61, 0x65, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x0a, 0x63, 0x69,
	0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x63, 0x69,
	0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x72, 0x0a, 0x34, 0x45, 0x32, 0x45, 0x45,
	0x52, 0x65, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x54, 0x6f, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65,
	0x6e, 0x74, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x26, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x6c, 0x67, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x6c, 0x67, 0x6f, 0x1a, 0xa6, 0x01, 0x0a,
	0x14, 0x45, 0x32, 0x45, 0x45, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x69, 0x70, 0x68, 0x65,
	0x72, 0x74, 0x65, 0x78, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x76, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x02, 0x69, 0x76, 0x1a, 0xdf, 0x01, 0x0a, 0x0f, 0x45, 0x32, 0x45, 0x45, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x57, 0x69, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x61, 0x6c, 0x67, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61,
	0x6c, 0x67, 0x6f, 0x12, 0x52, 0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6b, 0x6b, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x41, 0x50, 0x49, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x32, 0x45, 0x45, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0a, 0x63, 0x69, 0x70,
	0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x1a, 0xd0, 0x03, 0x0a, 0x2e, 0x45, 0x32, 0x45, 0x45,
	0x52, 0x65, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4b, 0x65, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x77, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x49, 0x64,
	0x12, 0x4c, 0x0a, 0x12, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x5c,
	0x0a, 0x1a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x1a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x6c, 0x67, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x6c, 0x67, 0x6f,
	0x12, 0x26, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e,
	0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6b, 0x6b, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x41,
	0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x32, 0x45, 0x45, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0a,
	0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x5c, 0x0a, 0x34, 0x45, 0x32,
	0x45, 0x45, 0x52, 0x65, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x50,
	0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x54, 0x6f, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x41,
	0x6c, 0x67, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4b, 0x65, 0x79, 0x41, 0x6c, 0x67, 0x6f, 0x1a, 0xa2, 0x02, 0x0a, 0x1c, 0x45, 0x32, 0x45,
	0x45, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4b, 0x65, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x77, 0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x4c, 0x0a, 0x12, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x5c, 0x0a,
	0x1a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x1a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x61,
	0x6c, 0x67, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x6c, 0x67, 0x6f, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x49, 0x0a,
	0x21, 0x45, 0x32, 0x45, 0x45, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x54, 0x6f, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x41,
	0x6c, 0x67, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4b, 0x65, 0x79, 0x41, 0x6c, 0x67, 0x6f, 0x2a, 0x52, 0x0a, 0x0c, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x69, 0x7a, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x49, 0x50, 0x48,
	0x45, 0x52, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x53, 0x4b, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x4c, 0x50,
	0x48, 0x41, 0x5f, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x10, 0x04, 0x42, 0x45, 0x5a, 0x30,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x72, 0x69, 0x70, 0x74,
	0x61, 0x6b, 0x65, 0x79, 0x2f, 0x6b, 0x6b, 0x2d, 0x67, 0x6f, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x6b,
	0x72, 0x69, 0x70, 0x74, 0x61, 0x6b, 0x65, 0x79, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0xaa, 0x02, 0x10, 0x4b, 0x4b, 0x2e, 0x53, 0x64, 0x6b, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_request_proto_rawDescOnce sync.Once
	file_request_proto_rawDescData = file_request_proto_rawDesc
)

func file_request_proto_rawDescGZIP() []byte {
	file_request_proto_rawDescOnce.Do(func() {
		file_request_proto_rawDescData = protoimpl.X.CompressGZIP(file_request_proto_rawDescData)
	})
	return file_request_proto_rawDescData
}

var file_request_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_request_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_request_proto_goTypes = []interface{}{
	(TokenizeType)(0),                                                       // 0: kk.core.structure.TokenizeType
	(*APIRequest)(nil),                                                      // 1: kk.core.structure.APIRequest
	(*APIRequest_SingleVerifyMAC)(nil),                                      // 2: kk.core.structure.APIRequest.SingleVerifyMAC
	(*APIRequest_VerifyMAC)(nil),                                            // 3: kk.core.structure.APIRequest.VerifyMAC
	(*APIRequest_SingleEncrypt)(nil),                                        // 4: kk.core.structure.APIRequest.SingleEncrypt
	(*APIRequest_Encrypt)(nil),                                              // 5: kk.core.structure.APIRequest.Encrypt
	(*APIRequest_SingleDecrypt)(nil),                                        // 6: kk.core.structure.APIRequest.SingleDecrypt
	(*APIRequest_Decrypt)(nil),                                              // 7: kk.core.structure.APIRequest.Decrypt
	(*APIRequest_SingleExternalDecrypt)(nil),                                // 8: kk.core.structure.APIRequest.SingleExternalDecrypt
	(*APIRequest_ExternalDecrypt)(nil),                                      // 9: kk.core.structure.APIRequest.ExternalDecrypt
	(*APIRequest_SingleTokenize)(nil),                                       // 10: kk.core.structure.APIRequest.SingleTokenize
	(*APIRequest_Tokenize)(nil),                                             // 11: kk.core.structure.APIRequest.Tokenize
	(*APIRequest_SingleDetokenize)(nil),                                     // 12: kk.core.structure.APIRequest.SingleDetokenize
	(*APIRequest_Detokenize)(nil),                                           // 13: kk.core.structure.APIRequest.Detokenize
	(*APIRequest_SingleReencrypt)(nil),                                      // 14: kk.core.structure.APIRequest.SingleReencrypt
	(*APIRequest_Reencrypt)(nil),                                            // 15: kk.core.structure.APIRequest.Reencrypt
	(*APIRequest_E2EEReencryptFromSessionKeyToPermanentKeySource)(nil),      // 16: kk.core.structure.APIRequest.E2EEReencryptFromSessionKeyToPermanentKeySource
	(*APIRequest_E2EEReencryptFromSessionKeyToPermanentKeyDestination)(nil), // 17: kk.core.structure.APIRequest.E2EEReencryptFromSessionKeyToPermanentKeyDestination
	(*APIRequest_E2EESingleCiphertext)(nil),                                 // 18: kk.core.structure.APIRequest.E2EESingleCiphertext
	(*APIRequest_E2EECompareWith)(nil),                                      // 19: kk.core.structure.APIRequest.E2EECompareWith
	(*APIRequest_E2EEReencryptFromPermanentKeyToClientKeySource)(nil),       // 20: kk.core.structure.APIRequest.E2EEReencryptFromPermanentKeyToClientKeySource
	(*APIRequest_E2EEReencryptFromPermanentKeyToSessionKeyDestination)(nil), // 21: kk.core.structure.APIRequest.E2EEReencryptFromPermanentKeyToSessionKeyDestination
	(*APIRequest_E2EEEncryptToClientKeySource)(nil),                         // 22: kk.core.structure.APIRequest.E2EEEncryptToClientKeySource
	(*APIRequest_E2EEEncryptToClientKeyDestination)(nil),                    // 23: kk.core.structure.APIRequest.E2EEEncryptToClientKeyDestination
	(*wrapperspb.StringValue)(nil),                                          // 24: google.protobuf.StringValue
	(*wrapperspb.UInt32Value)(nil),                                          // 25: google.protobuf.UInt32Value
}
var file_request_proto_depIdxs = []int32{
	24, // 0: kk.core.structure.APIRequest.SingleVerifyMAC.iv:type_name -> google.protobuf.StringValue
	2,  // 1: kk.core.structure.APIRequest.VerifyMAC.mac:type_name -> kk.core.structure.APIRequest.SingleVerifyMAC
	24, // 2: kk.core.structure.APIRequest.SingleEncrypt.aad:type_name -> google.protobuf.StringValue
	4,  // 3: kk.core.structure.APIRequest.Encrypt.plaintext:type_name -> kk.core.structure.APIRequest.SingleEncrypt
	25, // 4: kk.core.structure.APIRequest.SingleDecrypt.keyVersion:type_name -> google.protobuf.UInt32Value
	24, // 5: kk.core.structure.APIRequest.SingleDecrypt.aad:type_name -> google.protobuf.StringValue
	24, // 6: kk.core.structure.APIRequest.SingleDecrypt.mac:type_name -> google.protobuf.StringValue
	24, // 7: kk.core.structure.APIRequest.SingleDecrypt.iv:type_name -> google.protobuf.StringValue
	24, // 8: kk.core.structure.APIRequest.SingleDecrypt.wrappedSessionKey:type_name -> google.protobuf.StringValue
	6,  // 9: kk.core.structure.APIRequest.Decrypt.ciphertext:type_name -> kk.core.structure.APIRequest.SingleDecrypt
	24, // 10: kk.core.structure.APIRequest.SingleExternalDecrypt.aad:type_name -> google.protobuf.StringValue
	24, // 11: kk.core.structure.APIRequest.SingleExternalDecrypt.mac:type_name -> google.protobuf.StringValue
	24, // 12: kk.core.structure.APIRequest.SingleExternalDecrypt.iv:type_name -> google.protobuf.StringValue
	24, // 13: kk.core.structure.APIRequest.SingleExternalDecrypt.wrappedSessionKey:type_name -> google.protobuf.StringValue
	8,  // 14: kk.core.structure.APIRequest.ExternalDecrypt.ciphertext:type_name -> kk.core.structure.APIRequest.SingleExternalDecrypt
	0,  // 15: kk.core.structure.APIRequest.SingleTokenize.tokenizedWith:type_name -> kk.core.structure.TokenizeType
	10, // 16: kk.core.structure.APIRequest.Tokenize.text:type_name -> kk.core.structure.APIRequest.SingleTokenize
	12, // 17: kk.core.structure.APIRequest.Detokenize.token:type_name -> kk.core.structure.APIRequest.SingleDetokenize
	25, // 18: kk.core.structure.APIRequest.SingleReencrypt.keyVersion:type_name -> google.protobuf.UInt32Value
	24, // 19: kk.core.structure.APIRequest.SingleReencrypt.aad:type_name -> google.protobuf.StringValue
	24, // 20: kk.core.structure.APIRequest.SingleReencrypt.mac:type_name -> google.protobuf.StringValue
	24, // 21: kk.core.structure.APIRequest.SingleReencrypt.iv:type_name -> google.protobuf.StringValue
	24, // 22: kk.core.structure.APIRequest.SingleReencrypt.wrappedSessionKey:type_name -> google.protobuf.StringValue
	14, // 23: kk.core.structure.APIRequest.Reencrypt.ciphertext:type_name -> kk.core.structure.APIRequest.SingleReencrypt
	24, // 24: kk.core.structure.APIRequest.E2EEReencryptFromSessionKeyToPermanentKeySource.wrappedPrivateKey:type_name -> google.protobuf.StringValue
	24, // 25: kk.core.structure.APIRequest.E2EEReencryptFromSessionKeyToPermanentKeySource.metadata:type_name -> google.protobuf.StringValue
	24, // 26: kk.core.structure.APIRequest.E2EEReencryptFromSessionKeyToPermanentKeySource.ciphertext:type_name -> google.protobuf.StringValue
	24, // 27: kk.core.structure.APIRequest.E2EESingleCiphertext.text:type_name -> google.protobuf.StringValue
	24, // 28: kk.core.structure.APIRequest.E2EESingleCiphertext.mac:type_name -> google.protobuf.StringValue
	24, // 29: kk.core.structure.APIRequest.E2EESingleCiphertext.iv:type_name -> google.protobuf.StringValue
	25, // 30: kk.core.structure.APIRequest.E2EECompareWith.keyVersion:type_name -> google.protobuf.UInt32Value
	18, // 31: kk.core.structure.APIRequest.E2EECompareWith.ciphertext:type_name -> kk.core.structure.APIRequest.E2EESingleCiphertext
	24, // 32: kk.core.structure.APIRequest.E2EEReencryptFromPermanentKeyToClientKeySource.encryptedClientKey:type_name -> google.protobuf.StringValue
	24, // 33: kk.core.structure.APIRequest.E2EEReencryptFromPermanentKeyToClientKeySource.encryptedClientKeyMetadata:type_name -> google.protobuf.StringValue
	25, // 34: kk.core.structure.APIRequest.E2EEReencryptFromPermanentKeyToClientKeySource.keyVersion:type_name -> google.protobuf.UInt32Value
	18, // 35: kk.core.structure.APIRequest.E2EEReencryptFromPermanentKeyToClientKeySource.ciphertext:type_name -> kk.core.structure.APIRequest.E2EESingleCiphertext
	24, // 36: kk.core.structure.APIRequest.E2EEEncryptToClientKeySource.encryptedClientKey:type_name -> google.protobuf.StringValue
	24, // 37: kk.core.structure.APIRequest.E2EEEncryptToClientKeySource.encryptedClientKeyMetadata:type_name -> google.protobuf.StringValue
	38, // [38:38] is the sub-list for method output_type
	38, // [38:38] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_request_proto_init() }
func file_request_proto_init() {
	if File_request_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_request_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequest_SingleVerifyMAC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequest_VerifyMAC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequest_SingleEncrypt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequest_Encrypt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequest_SingleDecrypt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequest_Decrypt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequest_SingleExternalDecrypt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequest_ExternalDecrypt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequest_SingleTokenize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequest_Tokenize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequest_SingleDetokenize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequest_Detokenize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequest_SingleReencrypt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequest_Reencrypt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequest_E2EEReencryptFromSessionKeyToPermanentKeySource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequest_E2EEReencryptFromSessionKeyToPermanentKeyDestination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequest_E2EESingleCiphertext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequest_E2EECompareWith); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequest_E2EEReencryptFromPermanentKeyToClientKeySource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequest_E2EEReencryptFromPermanentKeyToSessionKeyDestination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequest_E2EEEncryptToClientKeySource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_request_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRequest_E2EEEncryptToClientKeyDestination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_request_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_request_proto_goTypes,
		DependencyIndexes: file_request_proto_depIdxs,
		EnumInfos:         file_request_proto_enumTypes,
		MessageInfos:      file_request_proto_msgTypes,
	}.Build()
	File_request_proto = out.File
	file_request_proto_rawDesc = nil
	file_request_proto_goTypes = nil
	file_request_proto_depIdxs = nil
}
